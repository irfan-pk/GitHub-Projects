<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAGBgAAAEACADIBgAAFgAAACgAAAAYAAAAMAAAAAEACAAAAAAAoAIAAAAAAAAAAAAAAAEAAAAA
        AAAQwvQAEMD0ABGd6QAQxfQAEL70ACly1ABDsecAEMj0ABpIxAAYSMMAEMr0AGCF1gAuYM4AN57gABlc
        zAAaR8MALZHdAA/M9AA9secAD8X0ABQ9uQAUObgAEMH1ABZx1ACB8PsAG43qAA7E9AAQv/QAaZPeAE3h
        +QBu3v0AerDjAF7O9gBi5fcAaJHbAF/l+AD///8APeP6AA/B9AAVPMIADcf0ABDG9AAcR8YAPr/2ABlG
        xABqktoAWtL3AFvP9wB5ruMAd6nhAHKj4ABa1/YAFkC6AETH9QARW8oAeKHhABlYygBn2v0AX9n2ABdd
        zwBj2PsAFD65ABlVxgAVjecADMn0ACV+2wAPyfQAPd37AB+V7QBj1fsAY9b7AEOl6QAwh+AAbZfdABg+
        wAAWVscAUeH9AFbl9wAc0PYANtz5AIvy+wBW5fgAGmzZABpMwgASZs4ALLn3AHSe4AANxPQAWdj3ABCO
        5wBd2vMAW+P5ABQ7uQAAAAAAMYTbAESs6QBp1/sANaXoAAnL9AA/zfQAEzu5AAfM9AAh2fYAqvn9AHTq
        +gCBvucAbt/9ABM3swAVN70ACM30AFHf/QBorOMAFDi4AFrT9wBByvUAWeT3AA7I9ABq2P0Aa5bfAGvd
        /QBr3vwAWen7AFXl9wAAAAAAQq3pAGDk9wAWPMUATt36AFzO9gBZ1vYAVNz7AFTk9wAPVMUAFDvAAEOm
        6QALw/cAfczuABDL9AAbRs0AW+36ABM8uQBu5PoAh/P8AEXG9QBV5vcADcz2AEGB2QAN0vcAV+X4AA/N
        +gBU4/cAqvf9AFTs/ACo8PoAGpDoAEDO9wBa5vgAEMX1ABJp0gAvWMgAfPL8AEDl/AAUxvUAGUzFAECx
        6gAbQLgAf+z7ABqP6QBByvYAEmnUAFbj+AALjN4AV+T3AJPb8QAMx/QAebHlAGmS2gB0qOMAWtT3AFnh
        9wAUOLsACND0ADiJ3wBp4vsAEa3sABc+yAAt2PcAE9H0ABfC9gBF4fcAVdj6AGuW3gAAAAAAVdX6AFPm
        +ACE7foAWuT3AA/Q+QAPvfQAGVzLAErV9QBtmd8Ak+X1ABTO9gBd5PkACsT0ABY+uQBn4fwAatr7AD2b
        5QAOv/UADM/1AEXF9gAPzPoAapbeABGL5gAygtoADMD1AA7L9AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAO0i22BRdXV1dXV1dXV1dXV1dXV1dXV1dKkQ5dYaMXV1dXV1dXV1dXV1dXV1dXV1dUooZRWBH
        FF1dXV1dXV1dXV1dXV1dXV1dklW5p0bQ0T1dXV1dXV1dXV1dXV1dXV1doyArfpo8d140XV1dXV1dXV1d
        XV1dXV1dXQmA1Cc/wR5Bzl1dXV1dXV1dXV1dXV1dXV0JL4+F175qYVxdXV1dXV1dXV1dXV1dXV1dCS41
        bFmCeF9kXV1dXV1dXV1dXV1dXV1dXQ9xcrSpbs98FV1dXV1dXV1dXV1dXV1dXV0Psqhwnky3pBU4Dg7H
        U6VdXV1dXV1dXV1dCIGba1R/vNICAgICAgI+pV1dXV1dXV1dXQhYY4SHxgQEBAQEGxbVF6VdXV1dXV1d
        XV0IM0PZAQEBAQEBAQEWlTZdXV1dXV1dXV1dLDqiJgAAAAAAAAAAnbhLXV1dXV1dXV1dSsjNAwMDAwMT
        VxoTKcUXXV1dXV1dXV1dDKGuBwcHB0LLT7p0KJEXXV1dXV1dXV1dDCVACgoKiZMQBQYdTqoNXV1dXV1d
        XV1dDJhiERHa06sFXZ8GjcwNXV1dXV1dXV1dF7O1bWW7ZhJdXV0FW3kLXV1dXV1dXV1dVoimvSF9IxIF
        XQUGlFoLXV1dXV1dXV1dXTeZaJZzxJwGEAZRi29dXV1dXV1dXV1dXb+xl8Osg016kMKgaS1dXV1dXV1d
        XV1dXV3WSa1nUBgYjsoxsF1dXV1dXV1dXV1dXV1dXRzJrzAfMiJ2XV1dB///AAP//wAB//8AAP//AAB/
        /wCAP/8AwB//AOAP/wDwB/8A+AAPAPwAAwD+AAEA/wABAP+AAAD/gAAA/4AAAP+AAAD/gCAA/4BwAP+A
        IAD/wAEA/8ABAP/gAwD/+AcA
</value>
  </data>
</root>